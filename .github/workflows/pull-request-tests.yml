name: Pull Request Tests

on:
  pull_request:
    branches: [ master ]

jobs:
  test-project:
    runs-on: macos-latest
    strategy:
      matrix:
        destination:
          - platform=macOS
          - platform=iOS Simulator,OS=latest,name=iPhone 11
        skip-testing: [ 'TestProjectTests/FailingTests' ]
        action: [ test ]
        use-xcpretty: [ true, false ]
        include:
          - destination: platform=watchOS Simulator,OS=latest,name=Apple Watch Series 5 - 44mm
            skip-testing: ''
            action: build
            use-xcpretty: true
          - destination: platform=watchOS Simulator,OS=latest,name=Apple Watch Series 5 - 44mm
            skip-testing: ''
            action: build
            use-xcpretty: false
    steps:
      - run: sudo xcode-select -s /Applications/Xcode_12.app/Contents/Developer
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          project: __test__/TestProject/TestProject.xcodeproj
          scheme: TestProject
          destination: ${{matrix.destination}}
          skip-testing: ${{matrix.skip-testing}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
      - name: Check for derived data
        run: ls ~/Library/Developer/Xcode/DerivedData/ | grep -q '^TestProject.*'

  test-workspace:
    runs-on: macos-latest
    strategy:
      matrix:
        destination:
          - platform=macOS
          - platform=iOS Simulator,OS=latest,name=iPhone 11
        skip-testing: [ 'TestProjectTests/FailingTests' ]
        action: [ test ]
        use-xcpretty: [ true, false ]
        include:
          - destination: platform=watchOS Simulator,OS=latest,name=Apple Watch Series 5 - 44mm
            skip-testing: ''
            action: build
            use-xcpretty: true
          - destination: platform=watchOS Simulator,OS=latest,name=Apple Watch Series 5 - 44mm
            skip-testing: ''
            action: build
            use-xcpretty: false
    steps:
      - run: sudo xcode-select -s /Applications/Xcode_12.app/Contents/Developer
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          workspace: __test__/TestProject/TestProject.xcworkspace
          scheme: TestProject
          destination: ${{matrix.destination}}
          skip-testing: ${{matrix.skip-testing}}
          build-settings: ${{matrix.build-settings}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
      - name: Check for derived data
        run: ls ~/Library/Developer/Xcode/DerivedData/ | grep -q '^TestProject.*'

  test-package:
    runs-on: macos-latest
    strategy:
      matrix:
        destination:
          - platform=macOS
          - platform=iOS Simulator,OS=latest,name=iPhone 11
        action: [ test ]
        use-xcpretty: [ true, false ]
    steps:
      - run: sudo xcode-select -s /Applications/Xcode_12.app/Contents/Developer
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          spm-package: __test__/TestPackage
          scheme: TestPackage
          destination: ${{matrix.destination}}
          skip-testing: ${{matrix.skip-testing}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
      - name: Check for derived data
        run: ls ~/Library/Developer/Xcode/DerivedData/ | grep -q '^TestPackage.*'

  test-dry-run-project:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [ TestProject.xcodeproj ]
        target: [ SomeTarget ]
        destination: [ platform=macOS ]
        configuration: [ Debug ]
        sdk: [ SomeSDK ]
        arch: [ aarm64 ]
        xcconfig: [ SomeConfig.xcconfig ]
        jobs: [ 42 ]
        result-bundle-path: [ here/and/there.bundle ]
        result-bundle-version: [ 3 ]
        derived-data-path: [ there/and/here/ ]
        skip-testing: [ this ]
        build-settings: [ ABC=DEF ]
        action: [ action ]
        use-xcpretty: [ true, false ]
    steps:
      - run: test "${{secrets.ACTIONS_STEP_DEBUG}}" == "true"
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          project: ${{matrix.project}}
          target: ${{matrix.target}}
          destination: ${{matrix.destination}}
          configuration: ${{matrix.configuration}}
          sdk: ${{matrix.sdk}}
          arch: ${{matrix.arch}}
          xcconfig: ${{matrix.xcconfig}}
          jobs: ${{matrix.jobs}}
          parallelize-targets: true
          enable-code-coverage: true
          parallel-testing-enabled: true
          enable-address-sanitizer: false
          enable-thread-sanitizer: false
          enable-undefined-behavior-sanitizer: false
          result-bundle-path: ${{matrix.result-bundle-path}}
          result-bundle-version: ${{matrix.result-bundle-version}}
          derived-data-path: ${{matrix.derived-data-path}}
          skip-testing: ${{matrix.skip-testing}}
          skip-unavailable-actions: true
          build-settings: ${{matrix.build-settings}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
          dry-run: true
        id: xcodebuild
      - name: Check executed command
        run: |
          EXPECTED_COMMAND="xcodebuild \
          -project ${{matrix.project}} \
          -target ${{matrix.target}} \
          -destination ${{matrix.destination}} \
          -configuration ${{matrix.configuration}} \
          -sdk ${{matrix.sdk}} \
          -arch ${{matrix.arch}} \
          -xcconfig ${{matrix.xcconfig}} \
          -jobs ${{matrix.jobs}} \
          -parallelizeTargets \
          -enableCodeCoverage YES \
          -parallel-testing-enabled YES \
          -enableAddressSanitizer NO \
          -enableThreadSanitizer NO \
          -enableUndefinedBehaviorSanitizer NO \
          -resultBundlePath ${{mastrix.result-bundle-path}} \
          -resultBundleVersion ${{mastrix.result-bundle-version}} \
          -derivedDataPath ${{mastrix.derived-data-path}} \
          -skip-testing ${{mastrix.skip-testing}} \
          -skipUnavailableActions \
          ${{matrix.build-settings}} \
          ${{matrix.action}}"
          if [ "${{matrix.use-xcpretty}}" == "true" ]; then
            EXPECTED_COMMAND="${EXPECTED_COMMAND} | xcpretty"
          fi
          if [ "${EXPECTED_COMMAND}" != "${{steps.xcodebuild.outputs.executed-command}}" ]; then
            printf "::error::Executed command did not match expectations!\nExecuted: ${{steps.xcodebuild.outputs.executed-command}}\nExpected: ${EXPECTED_COMMAND}\n"
            exit 1
          fi

  test-dry-run-workspace:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [ TestWorkspace.xcworkspace ]
        scheme: [ TestScheme ]
        destination: [ platform=macOS ]
        configuration: [ Debug ]
        sdk: [ SomeSDK ]
        arch: [ aarm64 ]
        xcconfig: [ SomeConfig.xcconfig ]
        jobs: [ 42 ]
        result-bundle-path: [ here/and/there.bundle ]
        result-bundle-version: [ 3 ]
        derived-data-path: [ there/and/here/ ]
        skip-testing: [ this ]
        build-settings: [ ABC=DEF ]
        action: [ action ]
        use-xcpretty: [ true, false ]
    steps:
      - run: test "${{secrets.ACTIONS_STEP_DEBUG}}" == "true"
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          workspace: ${{matrix.workspace}}
          scheme: ${{matrix.scheme}}
          target: ${{matrix.target}}
          destination: ${{matrix.destination}}
          configuration: ${{matrix.configuration}}
          sdk: ${{matrix.sdk}}
          arch: ${{matrix.arch}}
          xcconfig: ${{matrix.xcconfig}}
          jobs: ${{matrix.jobs}}
          parallelize-targets: true
          enable-code-coverage: true
          parallel-testing-enabled: true
          enable-address-sanitizer: false
          enable-thread-sanitizer: false
          enable-undefined-behavior-sanitizer: false
          result-bundle-path: ${{matrix.result-bundle-path}}
          result-bundle-version: ${{matrix.result-bundle-version}}
          derived-data-path: ${{matrix.derived-data-path}}
          skip-testing: ${{matrix.skip-testing}}
          skip-unavailable-actions: true
          build-settings: ${{matrix.build-settings}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
          dry-run: true
        id: xcodebuild
      - name: Check executed command
        run: |
          EXPECTED_COMMAND="xcodebuild \
          -workspace ${{matrix.workspace}} \
          -scheme ${{matrix.scheme}} \
          -target ${{matrix.target}} \
          -destination ${{matrix.destination}} \
          -configuration ${{matrix.configuration}} \
          -sdk ${{matrix.sdk}} \
          -arch ${{matrix.arch}} \
          -xcconfig ${{matrix.xcconfig}} \
          -jobs ${{matrix.jobs}} \
          -parallelizeTargets \
          -enableCodeCoverage YES \
          -parallel-testing-enabled YES \
          -enableAddressSanitizer NO \
          -enableThreadSanitizer NO \
          -enableUndefinedBehaviorSanitizer NO \
          -resultBundlePath ${{mastrix.result-bundle-path}} \
          -resultBundleVersion ${{mastrix.result-bundle-version}} \
          -derivedDataPath ${{mastrix.derived-data-path}} \
          -skip-testing ${{mastrix.skip-testing}} \
          -skipUnavailableActions \
          ${{matrix.build-settings}} \
          ${{matrix.action}}"
          if [ "${{matrix.use-xcpretty}}" == "true" ]; then
            EXPECTED_COMMAND="${EXPECTED_COMMAND} | xcpretty"
          fi
          if [ "${EXPECTED_COMMAND}" != "${{steps.xcodebuild.outputs.executed-command}}" ]; then
            printf "::error::Executed command did not match expectations!\nExecuted: ${{steps.xcodebuild.outputs.executed-command}}\nExpected: ${EXPECTED_COMMAND}\n"
            exit 1
          fi

  test-dry-run-package:
    needs: deploy-action-code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spm-package: [ /path/to/TestPackage ]
        scheme: [ TestPackage ]
        destination: [ platform=macOS ]
        configuration: [ Debug ]
        sdk: [ SomeSDK ]
        arch: [ aarm64 ]
        xcconfig: [ SomeConfig.xcconfig ]
        jobs: [ 42 ]
        result-bundle-path: [ here/and/there.bundle ]
        result-bundle-version: [ 3 ]
        derived-data-path: [ there/and/here/ ]
        skip-testing: [ this ]
        build-settings: [ ABC=DEF ]
        action: [ action ]
        use-xcpretty: [ true, false ]
    steps:
      - run: test "${{secrets.ACTIONS_STEP_DEBUG}}" == "true"
      - name: Install dependencies
        run: sudo npm i -g @zeit/ncc typescript
      - uses: actions/checkout@v2
      - name: Generate action code
        run: npm run deploy
      - uses: './'
        with:
          spm-package: ${{matrix.spm-package}}
          scheme: ${{matrix.scheme}}
          target: ${{matrix.target}}
          destination: ${{matrix.destination}}
          configuration: ${{matrix.configuration}}
          sdk: ${{matrix.sdk}}
          arch: ${{matrix.arch}}
          xcconfig: ${{matrix.xcconfig}}
          jobs: ${{matrix.jobs}}
          parallelize-targets: true
          enable-code-coverage: true
          parallel-testing-enabled: true
          enable-address-sanitizer: false
          enable-thread-sanitizer: false
          enable-undefined-behavior-sanitizer: false
          result-bundle-path: ${{matrix.result-bundle-path}}
          result-bundle-version: ${{matrix.result-bundle-version}}
          derived-data-path: ${{matrix.derived-data-path}}
          skip-testing: ${{matrix.skip-testing}}
          skip-unavailable-actions: true
          build-settings: ${{matrix.build-settings}}
          action: ${{matrix.action}}
          use-xcpretty: ${{matrix.use-xcpretty}}
          dry-run: true
        id: xcodebuild
      - name: Check executed command
        run: |
          EXPECTED_COMMAND="pusdh ${{matrix.spm-package}} && \
          xcodebuild \
          -workspace ${{matrix.workspace}} \
          -scheme ${{matrix.scheme}} \
          -target ${{matrix.target}} \
          -destination ${{matrix.destination}} \
          -configuration ${{matrix.configuration}} \
          -sdk ${{matrix.sdk}} \
          -arch ${{matrix.arch}} \
          -xcconfig ${{matrix.xcconfig}} \
          -jobs ${{matrix.jobs}} \
          -parallelizeTargets \
          -enableCodeCoverage YES \
          -parallel-testing-enabled YES \
          -enableAddressSanitizer NO \
          -enableThreadSanitizer NO \
          -enableUndefinedBehaviorSanitizer NO \
          -resultBundlePath ${{mastrix.result-bundle-path}} \
          -resultBundleVersion ${{mastrix.result-bundle-version}} \
          -derivedDataPath ${{mastrix.derived-data-path}} \
          -skip-testing ${{mastrix.skip-testing}} \
          -skipUnavailableActions \
          ${{matrix.build-settings}} \
          ${{matrix.action}}"
          if [ "${{matrix.use-xcpretty}}" == "true" ]; then
            EXPECTED_COMMAND="${EXPECTED_COMMAND} | xcpretty"
          fi
          EXPECTED_COMMAND="${EXPECTED_COMMAND} ; popd"
          if [ "${EXPECTED_COMMAND}" != "${{steps.xcodebuild.outputs.executed-command}}" ]; then
            printf "::error::Executed command did not match expectations!\nExecuted: ${{steps.xcodebuild.outputs.executed-command}}\nExpected: ${EXPECTED_COMMAND}\n"
            exit 1
          fi
